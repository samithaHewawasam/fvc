#include <string>
#include <iostream>
#include <fstream>
#include <boost/filesystem.hpp>
#include <vector>
#include <typeinfo>
#include <bitset>
#include <boost/functional/hash.hpp>
#include <time.h>

using namespace std;
using namespace boost::filesystem;


/*
 * Reading last line of the index.log and return last line number
 */
 
int readlastLine(){

	int index = 0;
        ifstream indexLog(".frcs/index.log");
        string line;
	while (getline(indexLog, line)){
		index++;
		if (indexLog.eof())
		break;

	}
	return index;
}


/*
 * Create directory in the ./.frcs/objects if not exits
 */
 
void createDir(name){

    try
    {
    
	if(!boost::filesystem::exists(".frcs/objects/" + name)) {
		boost::filesystem::path dir(".frcs/objects/" + name);
		boost::filesystem::create_directory(dir);
	}

    }
    catch (filesystem_error &e)
    {
        std::cerr << e.what() << '\n';
    }

} 

class FileFactory {
public:
    void setFile(string name, string path, int i);
    string readFile(string name);
    void writeToIndexlog(string name, string path, string isFile);
    FileFactory();
private:
    string name;
    string path;
};


FileFactory::FileFactory(void) {

	cout << readlastLine() << endl;
	
}

void FileFactory::setFile(string name, string path, int i) {
    name = name;
    path = path;

    if(!boost::filesystem::exists(".frcs/objects/" + name)) {

        cout << "file found at" << path << endl;

    }
}

void FileFactory::writeToIndexlog(string name, string path, string isFile) {

   
    try
    {
        ofstream indexLog;
        indexLog.open(".frcs/index.log", ios_base::app); // ios_base:app flag use to append text to file

        indexLog << isFile << " " <<  path << " " << name << endl;

    }
    catch (filesystem_error &e)
    {
        std::cerr << e.what() << '\n';
    }

}

int main() {
    FileFactory file;
    
    file.writeToIndexlog(to_string(readlastLine()),"","");
    
    int i = 0;
    for ( boost::filesystem::recursive_directory_iterator end, dir("."); dir != end; ++dir ) {

        /*
         * Remove .frcs folder and a.out while directory iteratting
         */

        if(dir->path().filename().native() == ".frcs" or dir->path().filename().native() == "a.out") {

            dir.no_push();

        }

        /*
         * use post fix i to count index
         */

        i++;

        /*
         * use setFile function to set Filename and the path
         */
        file.setFile(
            dir->path().filename().native(),
            dir->path().native(),
            i
        );

        /*
         * Check if the file is_directory or a regular file.
         * direcoty::D regular_file::R
         */

        string isFile;

        if(is_regular_file(*dir))
            isFile = 'R';
        else if(is_directory(*dir))
            isFile = 'D';

        /*
         * Let's lookup for the index. use an Id to ref file structure.
         */

        file.writeToIndexlog(dir->path().filename().native(), dir->path().native(), isFile);

    }
}

